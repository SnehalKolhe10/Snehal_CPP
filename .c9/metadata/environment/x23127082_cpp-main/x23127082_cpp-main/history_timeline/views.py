{"filter":false,"title":"views.py","tooltip":"/x23127082_cpp-main/x23127082_cpp-main/history_timeline/views.py","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":99,"column":0},"action":"remove","lines":["from django.shortcuts import render, redirect, get_object_or_404","from .models import Event, Country","from .forms import EventForm","from django.contrib.auth import authenticate, login","from django.contrib.auth.forms import AuthenticationForm","from django.http import HttpResponseRedirect","from django.urls import reverse","from django.contrib.auth.forms import UserCreationForm","from django.shortcuts import render, redirect"," ","","def index(request):","    events = Event.objects.all()","    sorted_events = sorted(events, key=lambda event: event.title)  # Sort events by title","    return render(request, 'timeline/index.html', {'events': sorted_events})","","","def event_create(request):","    if request.method == 'POST':","        form = EventForm(request.POST)","        if form.is_valid():","            form.save()","            return redirect('index')","    else:","        form = EventForm()","    return render(request, 'timeline/create.html', {'form': form})","","def event_view(request, event_id):","    event = get_object_or_404(Event, pk=event_id)","    return render(request, 'timeline/view.html', {'event': event})","","def event_edit(request, event_id):","    event = get_object_or_404(Event, pk=event_id)","    if request.method == 'POST':","        form = EventForm(request.POST, instance=event)","        if form.is_valid():","            form.save()","            return redirect('index')","    else:","        form = EventForm(instance=event)","    return render(request, 'timeline/edit.html', {'form': form})","","def event_delete(request, event_id):","    event = get_object_or_404(Event, pk=event_id)","    if request.method == 'POST':","        event.delete()","        return redirect('index')","    return render(request, 'timeline/delete.html', {'event': event})","","def places(request):","    # You can add any necessary logic here to render the European map page","    return render(request, 'timeline/places.html')","    ","def home(request):","    # You can add any logic here to fetch data or perform other tasks","    return render(request, 'timeline/about.html') ","def europe_timeline(request):","    # Retrieve country and event data from the database","    countries = Country.objects.all()","    events = Event.objects.all()","","    # Pass the data to the template","    return render(request, 'timeline/europe_timeline.html', {'countries': countries, 'events': events})","    ","def user_login(request):","    if request.method == 'POST':","        form = AuthenticationForm(data=request.POST)","        if form.is_valid():","            # Authenticate the user","            username = form.cleaned_data.get('username')","            password = form.cleaned_data.get('password')","            user = authenticate(username=username, password=password)","            if user is not None:","                # Log the user in","                login(request, user)","                return HttpResponseRedirect(reverse('index'))","    else:","        form = AuthenticationForm()","        ","    return render(request, 'timeline/login.html', {'form': form})","    ","def user_signup(request):","    if request.method == 'POST':","        form = UserCreationForm(request.POST)","        if form.is_valid():","            user = form.save()","            # Automatically log in the user after successful sign-up","            username = form.cleaned_data.get('username')","            password = form.cleaned_data.get('password1')","            user = authenticate(username=username, password=password)","            if user is not None:","                login(request, user)","                return redirect('login')  # Redirect to the home page after successful sign-up and login","    else:","        form = UserCreationForm()","    return render(request, 'timeline/signup.html', {'form': form})","","def about_view(request):","    return render(request, 'timeline/about.html')",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":28,"column":0},"action":"insert","lines":["from django.shortcuts import render, redirect","from .models import Flight, Booking, Passenger","from django.contrib.auth.decorators import login_required","","def home(request):","    return render(request, 'home.html')","","def flight_search(request):","    if request.method == 'POST':","        departure_city = request.POST['departure_city']","        arrival_city = request.POST['arrival_city']","        flights = Flight.objects.filter(departure_city=departure_city, arrival_city=arrival_city)","        return render(request, 'search_results.html', {'flights': flights})","    return render(request, 'flight_search.html')","","@login_required","def book_flight(request, flight_id):","    flight = Flight.objects.get(id=flight_id)","    if request.method == 'POST':","        num_passengers = int(request.POST['num_passengers'])","        booking = Booking.objects.create(user=request.user, flight=flight, num_passengers=num_passengers)","        return redirect('user_profile')","    return render(request, 'book_flight.html', {'flight': flight})","","@login_required","def user_profile(request):","    bookings = Booking.objects.filter(user=request.user)","    return render(request, 'profile.html', {'bookings': bookings})",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":28,"column":0},"end":{"row":28,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1731690588421,"hash":"ad86489fdea93f5d368af0c03d3ecc434d7a4f41"}